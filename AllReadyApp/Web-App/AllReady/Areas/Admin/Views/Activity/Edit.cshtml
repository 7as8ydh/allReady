@model  AllReady.Areas.Admin.ViewModels.ActivityDetailViewModel
@inject AllReady.Services.ISelectListService SelectListService


@{
    //TODO: Need a better way of identifying Create vs Edit. Suggest not binding directly to model class, create view model instead
    var isEdit = Model.Id != 0;
    string cancelUrl;
    if (isEdit)
    {
        ViewBag.Title = $"Edit Activity";
        cancelUrl = Url.Action("Details", "Activity", new { id = Model.Id, area = "Admin" });
    }
    else
    {
        ViewBag.Title = "Create Activity";
        cancelUrl = Url.Action("Details", "Campaign", new { id = Model.CampaignId, area = "Admin" });
    }
}

<div class="row">
    <div class="col-12">
        <ol class="breadcrumb">
            <li><a asp-controller="Campaign" asp-action="Index" asp-route-area="Admin">Campaigns</a></li>
            <li><a asp-controller="Campaign" asp-action="Details" asp-route-id="@Model.CampaignId" asp-route-area="Admin">@Model.CampaignName</a></li>
            @if (isEdit)
            {
                <li><a asp-controller="Activity" asp-action="Details" asp-route-id="@Model.Id" asp-route-area="Admin">@Model.Title</a></li>
                <li>Edit</li>
            }
            else
            {
                <li>Create New Activity</li>
            }
            
        </ol>
    </div>
</div>

<h2>@ViewBag.Title</h2>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <div asp-validation-summary="ValidationSummary.ModelOnly" class="text-danger"></div>
        <input asp-for="Id" type="hidden" />
        <input asp-for="CampaignId" type="hidden" />
        <input asp-for="TenantId" type="hidden" />
        <div class="form-group">
            <label asp-for="Title" class="control-label col-md-2"></label>
            <div class="col-md-10">
                <input asp-for="Title" class="form-control" />
                <span asp-validation-for="Title" class="text-danger"></span>
            </div>
        </div>
        <div class="form-group">
            <label asp-for="Description" class="control-label col-md-2"></label>
            <div class="col-md-10">
                <textarea asp-for="Description" class="form-control"></textarea>
                <span asp-validation-for="Description" class="text-danger"></span>
            </div>
        </div>

        <div class="form-group">
            <label asp-for="StartDateTime" class="control-label col-md-2"></label>
            <div class="col-md-10">
                <input asp-for="StartDateTime" class="form-control datepicker" />
                <span asp-validation-for="StartDateTime" class="text-danger"></span>
            </div>
        </div>
        <div class="form-group">
            <label asp-for="EndDateTime" class="control-label col-md-2"></label>
            <div class="col-md-10">
                <input asp-for="EndDateTime" class="form-control datepicker" />
                <span asp-validation-for="EndDateTime" class="text-danger"></span>
            </div>
        </div>
        <div class="form-group">
            <label asp-for="RequiredSkills" class="control-label col-md-2"></label>
            <div class="col-md-10">
                <div data-bind="foreach: requiredSkills">
                    <div class="form-inline">
                        <select class="form-control" data-bind="attr: { name: ControlName($index) }, options: $root.availableSkills, optionsText: 'Text', optionsValue: 'Value', value: Id"></select>
                        <a href="#" data-bind="click: $root.deleteSkill" title="Delete required skill">
                            <span class="glyphicon glyphicon-remove" aria-hidden="true"></span>
                            Delete
                        </a>
                    </div>
                </div>
                <a href="#" data-bind="click: addSkill" title="Add required skill">
                    <span class="glyphicon glyphicon-plus" aria-hidden="true"></span>
                    Add
                </a>
            </div>
        </div>
        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <button type="submit" class="btn" data-bind="enable: requiredSkills.isValid">Save</button>
                <a href="@cancelUrl" class="btn">Cancel</a>
                <span class="label label-danger" data-bind="visible: !requiredSkills.isValid()">@Html.DisplayNameFor(m => m.RequiredSkills)" must be unique</span>
            </div>
        </div>
    </div>
}

@if (isEdit)
{
    <h2>Image</h2>
    <div class="form-horizontal">
        <div class="form-group">
            @Html.LabelFor(model => model.ImageUrl, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <img src="@Model.ImageUrl" class="img-thumbnail img-responsive col-md-4" />
                <form action="~/Admin/Activity/PostActivityFile" method="post" enctype="multipart/form-data">
                    @Html.AntiForgeryToken()
                    <input type="hidden" name="id" id="activiteyId" value="@Model.Id" />
                    <div class="form-group">
                        <div class="col-md-10">
                            <input type="file" name="file" id="newFile" class="control-label col-md-4" />
                            <button type="submit" class="btn col-md-1">Upload</button>
                        </div>
                    </div>
                </form>
            </div>
        </div>
    </div>
}

@section scripts {
    <script type="text/javascript">
        (function (ko, $, requiredSkills, availableSkills) {

            function AdminActivityViewModel(requiredSkills, availableSkills) {

                function RequiredSkillObservable(skillModel) {
                    var ret = ko.utils.extend({}, skillModel);
                    ret.Id = ko.observable(ret.Id);
                    ret.ControlName = function (index) {
                        return 'RequiredSkills[' + ko.unwrap(index) + '].SkillId';
                    };
                    return ret;
                }
                requiredSkills = (requiredSkills || []).map(RequiredSkillObservable);

                var self = this;
                this.requiredSkills = ko.observableArray(requiredSkills).uniqueValidator("Id");
                this.availableSkills = ko.observableArray(availableSkills);
                this.addSkill = function() {
                    self.requiredSkills.push(RequiredSkillObservable());
                };
                this.deleteSkill = function(skill) {
                    self.requiredSkills.remove(skill);
                };
            }

            ko.applyBindings(new AdminActivityViewModel(requiredSkills, availableSkills));
        })(ko, $,
            @Json.Serialize(Model.RequiredSkills.Select(rs => new { Id = rs.SkillId })),
            @Json.Serialize(SelectListService.GetSkills()));
    </script>
}

