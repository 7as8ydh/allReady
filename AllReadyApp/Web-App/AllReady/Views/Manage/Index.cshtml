@model IndexViewModel
@using AllReady.Security;

@{
    ViewData["Title"] = "Manage your account";
}

<h2>@ViewData["Title"]</h2>
<p class="text-success">@ViewData["StatusMessage"]</p>
<div>
    @using (Html.BeginForm())
    {
        @Html.AntiForgeryToken()

        <h4>Change your account settings</h4>
        <hr />
        <dl class="dl-horizontal">
            @if (User.IsUserType(UserType.TenantAdmin))
            {
                <dt>Phone number:</dt>
                <dd>
                    @(Model.PhoneNumber ?? "None")
                    @if (Model.PhoneNumber != null)
                    {
                        <a asp-controller="Manage" asp-action="AddPhoneNumber">Change</a>
                        @: &nbsp;|&nbsp;
                        <a asp-controller="Manage" asp-action="RemovePhoneNumber">Remove</a>
                    }
                    else
                    {
                        <a asp-controller="Manage" asp-action="AddPhoneNumber">Add</a>
                    }
                </dd>
                @if (User.IsUserType(UserType.SiteAdmin))
                {
                    <dt>Approve users:</dt>
                    <dd>
                        <a asp-controller="Site" asp-action="Index" asp-route-area="Admin">Find</a>
                    </dd>
                }
            }
            else
            {
                <dt>External logins:</dt>
                <dd>
                    @Model.Logins.Count [<a asp-controller="Manage" asp-action="ManageLogins">Manage</a>]
                </dd>
                <dt>Password:</dt>
                <dd>
                    @if (Model.HasPassword)
                    {
                        <a asp-controller="Manage" asp-action="ChangePassword">Change</a>
                    }
                    else
                    {
                        <a asp-controller="Manage" asp-action="SetPassword">Create</a>
                    }
                </dd>
            }
            <dt>
                <label asp-for="AssociatedSkills"></label>:
            </dt>
            <dd>
                <div data-bind="foreach: skills">
                    <div class="form-inline">
                        <select class="form-control" data-bind="attr: { name: ControlName($index) }, options: $root.availableSkills, optionsText: 'Name', optionsValue: 'Id', value: Id"></select>
                        <a href="#" data-bind="click: $root.deleteSkill" title="Delete skill">
                            <span class="glyphicon glyphicon-remove" aria-hidden="true"></span>
                            Delete
                        </a>
                    </div>
                </div>
                <a href="#" data-bind="click: addSkill" title="Add skill">
                    <span class="glyphicon glyphicon-plus" aria-hidden="true"></span>
                    Add
                </a>
                <div>
                    <button type="submit" class="btn" data-bind="enable: skills.isValid">Save Skills</button>
                    <span class="label label-danger" data-bind="visible: !skills.isValid()">"@Html.DisplayNameFor(m => m.AssociatedSkills)" must be unique</span>
                </div>
            </dd>
        </dl>
    }
</div>

@section scripts {
    <script type="text/javascript">
        (function (ko, $, skills, availableSkills) {

            function ManageUserViewModel(skills, availableSkills) {

                function SkillObservable(skillModel) {
                    var ret = ko.utils.extend({}, skillModel);
                    ret.Id = ko.observable(ret.Id);
                    ret.ControlName = function (index) {
                        return 'AssociatedSkills[' + ko.unwrap(index) + '].SkillId';
                    };
                    return ret;
                }
                skills = (skills || []).map(SkillObservable);

                var self = this;
                this.skills = ko.observableArray(skills).uniqueValidator("Id");
                this.availableSkills = ko.observableArray(availableSkills);
                this.addSkill = function() {
                    self.skills.push(SkillObservable());
                };
                this.deleteSkill = function(skill) {
                    self.skills.remove(skill);
                };
            }

            ko.applyBindings(new ManageUserViewModel(skills, availableSkills));
        })(ko, $,
            @Json.Serialize(Model.AssociatedSkills.Select(rs => new { Id = rs.SkillId })),
            @Json.Serialize(ViewData["Skills"]));
    </script>
}
